/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AnimeDto,
    AnimeDtoFromJSON,
    AnimeDtoToJSON,
    PageDtoOfAnimeLightDto,
    PageDtoOfAnimeLightDtoFromJSON,
    PageDtoOfAnimeLightDtoToJSON,
    PageDtoOfEpisodeDto,
    PageDtoOfEpisodeDtoFromJSON,
    PageDtoOfEpisodeDtoToJSON,
} from '../models';

export interface FindAllUsingGETRequest {
    page: number;
    size: number;
    title?: string;
}

export interface GetAnimeUsingGETRequest {
    id: number;
}

export interface GetEpisodesUsingGETRequest {
    id: number;
    page: number;
    size: number;
}

/**
 * 
 */
export class AnimeControllerApi extends runtime.BaseAPI {

    /**
     * findAll
     */
    async findAllUsingGETRaw(requestParameters: FindAllUsingGETRequest): Promise<runtime.ApiResponse<PageDtoOfAnimeLightDto>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling findAllUsingGET.');
        }

        if (requestParameters.size === null || requestParameters.size === undefined) {
            throw new runtime.RequiredError('size','Required parameter requestParameters.size was null or undefined when calling findAllUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/anime`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageDtoOfAnimeLightDtoFromJSON(jsonValue));
    }

    /**
     * findAll
     */
    async findAllUsingGET(requestParameters: FindAllUsingGETRequest): Promise<PageDtoOfAnimeLightDto> {
        const response = await this.findAllUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getAnime
     */
    async getAnimeUsingGETRaw(requestParameters: GetAnimeUsingGETRequest): Promise<runtime.ApiResponse<AnimeDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAnimeUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/anime/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnimeDtoFromJSON(jsonValue));
    }

    /**
     * getAnime
     */
    async getAnimeUsingGET(requestParameters: GetAnimeUsingGETRequest): Promise<AnimeDto> {
        const response = await this.getAnimeUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getEpisodes
     */
    async getEpisodesUsingGETRaw(requestParameters: GetEpisodesUsingGETRequest): Promise<runtime.ApiResponse<PageDtoOfEpisodeDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEpisodesUsingGET.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling getEpisodesUsingGET.');
        }

        if (requestParameters.size === null || requestParameters.size === undefined) {
            throw new runtime.RequiredError('size','Required parameter requestParameters.size was null or undefined when calling getEpisodesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/anime/{id}/episodes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageDtoOfEpisodeDtoFromJSON(jsonValue));
    }

    /**
     * getEpisodes
     */
    async getEpisodesUsingGET(requestParameters: GetEpisodesUsingGETRequest): Promise<PageDtoOfEpisodeDto> {
        const response = await this.getEpisodesUsingGETRaw(requestParameters);
        return await response.value();
    }

}
